service: movies

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  environment:
    DYNAMODB_TABLE: "movies"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:427334772666:table/movies"

functions:
  create:
    handler: create.create
    events:
      - http:
          path: movies
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  delete:
    handler: delete.delete
    events:
      - http:
          path: movies/{id}
          method: delete
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            paths:
              id: true

  get:
    handler: get.get
    events:
      - http:
          path: movies/{id}
          method: get
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            paths:
              id: true

  update:
    handler: update.update
    events:
      - http:
          path: movies/{id}
          method: put
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            paths:
              id: true

  list:
    handler: list.movie_list
    events:
      - http:
          path: movies
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
resources:
  Resources:
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: "la9uslkg75"
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "arn:aws:cognito-idp:us-east-1:427334772666:userpool/us-east-1_la6Bl4dEZ"
